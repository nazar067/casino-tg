from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery
from aiogram.filters import Command
from config import API_TOKEN
from finance.payment import process_payment, handle_successful_payment
from user.balance import get_user_balance
from finance.keyboards import payment_keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start
    """
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∑–≤–µ–∑–¥–∞–º–∏ ‚≠êÔ∏è.")


@router.message(Command("donate"))
async def donate_handler(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /donate –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ keyboards.py
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=payment_keyboard())


@router.callback_query(lambda c: c.data.startswith("pay:"))
async def pay_stars_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –≤–∞–ª—é—Ç–æ–π XTR
    """
    amount = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback data
    provider_token = ""

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–∞
    payment_data = await process_payment(callback, amount, provider_token)
    if payment_data:
        await callback.message.answer_invoice(**payment_data)        

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery
    """
    await pre_checkout_query.answer(ok=True)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥—á–µ–∫–∞—É—Ç

@router.message(lambda m: m.successful_payment)
async def successful_payment_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    pool = dp["db_pool"]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ handle_successful_payment
    final_amount = await handle_successful_payment(pool, user_id, amount)

    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {final_amount} ‚≠êÔ∏è!")

@router.message(Command("balance"))
async def balance_handler(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    """
    pool = dp["db_pool"]
    user_id = message.from_user.id
    balance = await get_user_balance(pool, user_id)
    await message.answer(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚≠êÔ∏è")


async def main():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–æ—É—Ç–µ—Ä–∞
    pool = await get_db_pool(DATABASE_URL)
    dp["db_pool"] = pool
    await init_db(pool)
    dp.include_router(router)

    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    finally:
        await pool.close()
        await bot.session.close()


if __name__ == "__main__":
    import asyncio
    from config import DATABASE_URL
    from db.db import get_db_pool, init_db
    asyncio.run(main())
