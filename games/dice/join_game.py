from aiogram.types import CallbackQuery
from aiogram import Router

from user.balance import get_user_balance

router = Router()

async def join_game_handler(callback: CallbackQuery, pool):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.
    """
    game_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    if not pool:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    async with pool.acquire() as connection:
        game = await connection.fetchrow("""
            SELECT * FROM gameDice WHERE id = $1 AND is_closed = FALSE
        """, game_id)

        if not game:
            await callback.answer("‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
            return

        if game["player1_id"] == user_id:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∏–≥—Ä–µ.", show_alert=True)
            return

        if game["player2_id"] is not None:
            await callback.answer("‚ö†Ô∏è –£ —ç—Ç–æ–π –∏–≥—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫.", show_alert=True)
            return

        user_balance = await get_user_balance(pool, user_id)
        if user_balance < game["bet"]:
            await callback.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        await connection.execute("""
            UPDATE gameDice
            SET player2_id = $1
            WHERE id = $2
        """, user_id, game_id)

    await callback.message.edit_text(
        f"üé≤ –ò–≥—Ä–∞ #{game_id} –≥–æ—Ç–æ–≤–∞!\n\n–ò–≥—Ä–æ–∫ 1: {game['player1_id']}\n–ò–≥—Ä–æ–∫ 2: {user_id}\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."
    )
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")
